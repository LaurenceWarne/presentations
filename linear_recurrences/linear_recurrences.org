#+TITLE: Linear Recurrences
#+OPTIONS: reveal_title_slide:nil
#+REVEAL_THEME: league
#+reveal_extra_css: ../extra.css
#+MACRO: multi-line-frag @@html:<div class="fragment"><p>$1</p></div>@@

* Introduction

We can define a linear recurrence as sequence \( a_n \) satisfying:
\[ a_n = C_{n - 1}a_{n - 1} + ... + C_{n - k}a_{n - k} \]
Along with a set of base cases:
\[ a_1 = D_1, ... a_k = D_k \]
#+BEGIN_EXPORT html
<div class="fragment">
#+END_EXPORT
Perhaps the most famous example is the Fibonacci Sequence:
\begin{align*}
F_n &= F_{n - 1} + F_{n - 2} \\
F_1 &= F_2 = 1
\end{align*}
#+BEGIN_EXPORT html
</div>
#+END_EXPORT
* Of the First Order

\begin{align*}
a_n &= ra_{n - 1} \\
a_1 &= a
\end{align*}
#+BEGIN_EXPORT html
<div class="fragment">
#+END_EXPORT
Blind application gives an \( O(n) \) method of computing the nth term, but it's well known this can be reduced to \( O(log(n)) \)* via the repeating squaring method:

\[
a_{24} = ar^{24} = a(r^{12})^2 = a((r^{6})^2)^2 = ... = a(((r^2*r)^2)^2)^2
\]
#+BEGIN_EXPORT html
</div>
#+END_EXPORT

#+BEGIN_EXPORT html
<div class="fragment">
#+END_EXPORT
*Our caveat is that \( a_n \) will generally grow exponentially so multiplications may soon cease to be a fast operation.  But our time bound stays true if we restrict ourselves for example \( a_n \mod p \).  For example lets take \( a=2, r = 3 \):
#+begin_src python
2*pow(3, 10**100, 100000007)
# 8805418
#+end_src
#+BEGIN_EXPORT html
</div>
#+END_EXPORT

* The Fibonacci Sequence

Can we do the same for the Fibonacci sequence?

#+BEGIN_EXPORT html
<div class="fragment">
#+END_EXPORT
Yes, it's well known a similar closed form exists: *Binet's Formula*
\[
F_n = \frac{1}{\sqrt{5}} \left[\left(\frac{1 + \sqrt{5}}{2}\right)^n - \left(\frac{1 - \sqrt{5}}{2}\right)^n\right] = \left \lfloor \frac{1}{\sqrt{5}} \left(\frac{1 + \sqrt{5}}{2}\right)^n \right \rfloor
\]
#+BEGIN_EXPORT html
</div>
#+END_EXPORT

#+BEGIN_EXPORT html
<div class="fragment">
#+END_EXPORT
However, we see despite the Fibonacci being positive integers, calculating \( F_n \) this way requires arithmetic with irrational numbers.
#+BEGIN_EXPORT html
</div>
#+END_EXPORT
#+BEGIN_EXPORT html
<div class="fragment">
#+END_EXPORT
Furthermore, since finding a closed form for linear recurrences of order \( d \) is equivalent to find the roots of a degreee \( d \) polynomial we can't compute a closed form in general.
#+BEGIN_EXPORT html
</div>
#+END_EXPORT

* Matrices

First, we make an observation:

\begin{align*}
\left(
  \begin{array}{cc}
  1 & 1 \\
  1 & 0 
  \end{array}
\right)
\left(
\begin{array}{c}
   F_n \\
   F_{n - 1} \\
\end{array}
\right)
= 
\left(
\begin{array}{c}
   F_{n + 1} \\
   F_n \\
\end{array}
\right)
\end{align*}

#+BEGIN_EXPORT html
<div class="fragment">
#+END_EXPORT
In fact:

\begin{align*}
\left(
  \begin{array}{cc}
  1 & 1 \\
  1 & 0 
  \end{array}
\right)^n
\left(
\begin{array}{c}
   1 \\
   1 \\
\end{array}
\right)
= 
\left(
\begin{array}{c}
   F_{n + 1} \\
   F_n \\
\end{array}
\right)
\end{align*}

We can generalise the repeated squaring method to elements of any semigroup, which applies to matrices over multiplication.
#+BEGIN_EXPORT html
</div>
#+END_EXPORT

#+BEGIN_EXPORT html
<div class="fragment">
#+END_EXPORT
This gets us to \( O(log(n)) \), /without/ the need for float arithmetic.

#+begin_src python
R = IntegerModRing(100000007)
Matrix(R, [[1, 1], [1, 0]])^(10^100) * vector(R, [1, 1])
# (37094104, 80003276)
#+end_src

#+BEGIN_EXPORT html
</div>
#+END_EXPORT
